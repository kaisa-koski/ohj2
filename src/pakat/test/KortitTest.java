package pakat.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import pakat.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.03.19 12:33:00 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class KortitTest {



  // Generated by ComTest BEGIN
  /** testLisaa28 */
  @Test
  public void testLisaa28() {    // Kortit: 28
    Kortit kortit = new Kortit(); 
    Kortti jace1 = new Kortti(), jace2 = new Kortti(); 
    assertEquals("From: Kortit line: 31", 0, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 32", 1, kortit.getLkm()); 
    kortit.lisaa(jace2); assertEquals("From: Kortit line: 33", 2, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 34", 3, kortit.getLkm()); 
    assertEquals("From: Kortit line: 35", jace1, kortit.anna(0)); 
    assertEquals("From: Kortit line: 36", jace2, kortit.anna(1)); 
    assertEquals("From: Kortit line: 37", jace1, kortit.anna(2)); 
    assertEquals("From: Kortit line: 38", false, kortit.anna(1) == jace1); 
    assertEquals("From: Kortit line: 39", true, kortit.anna(1) == jace2); 
    try {
    assertEquals("From: Kortit line: 40", jace1, kortit.anna(3)); 
    fail("Kortit: 40 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 41", 4, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 42", 5, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 43", 6, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 44", 7, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 45", 8, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 46", 9, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 47", 10, kortit.getLkm()); 
    kortit.lisaa(jace1); assertEquals("From: Kortit line: 48", 11, kortit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaaTilaa62 */
  @Test
  public void testLisaaTilaa62() {    // Kortit: 62
    Kortit kortit = new Kortit(); 
    Kortti kortti1 = new Kortti("Eka kortti", 1, 1); 
    Kortti kortti2 = new Kortti("Muut kortit", 2, 2); 
    kortit.lisaa(kortti1); 
    kortit.lisaa(kortti2); kortit.lisaa(kortti2); 
    kortit.lisaa(kortti2); kortit.lisaa(kortti2); 
    kortit.lisaa(kortti2); kortit.lisaa(kortti2); 
    kortit.lisaa(kortti2); kortit.lisaa(kortti2); 
    kortit.lisaa(kortti2); assertEquals("From: Kortit line: 71", 10, kortit.getLkm());  //alkuperäinen maksimi
    kortit.lisaa(kortti2); assertEquals("From: Kortit line: 72", 11, kortit.getLkm());  //nyt tehty uusi taulukko
    assertEquals("From: Kortit line: 73", kortti1, kortit.anna(0)); 
    assertEquals("From: Kortit line: 74", kortti2, kortit.anna(1));  //kopioitu taulukko sisältää myös aiemmin lisätyt
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna99 */
  @Test
  public void testAnna99() {    // Kortit: 99
    Kortit kortit = new Kortit(); 
    Kortti kortti1 = new Kortti("Eka kortti", 1, 1); 
    Kortti kortti2 = new Kortti("Muut kortit", 2, 2); 
    assertEquals("From: Kortit line: 103", kortti1, kortit.anna(0)); 
    assertEquals("From: Kortit line: 104", kortti2, kortit.anna(1));
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaNimi118 */
  @Test
  public void testAnnaNimi118() {    // Kortit: 118
    Kortit kortit = new Kortit(); 
    Kortti kortti1 = new Kortti("Eka kortti", 1, 1); 
    Kortti kortti2 = new Kortti("Muut kortit", 2, 2); 
    kortit.lisaa(kortti1); kortit.lisaa(kortti2); 
    assertEquals("From: Kortit line: 123", "Eka kortti", kortit.annaNimi(1)); 
    assertEquals("From: Kortit line: 124", "Muut kortit", kortit.annaNimi(2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString140 */
  @Test
  public void testToString140() {    // Kortit: 140
    Kortit kortit = new Kortit(); 
    Kortti kortti1 = new Kortti("Eka kortti", 1, 1); 
    Kortti kortti2 = new Kortti("Muut kortit", 2, 2); 
    kortit.lisaa(kortti1); kortit.lisaa(kortti2); 
    assertEquals("From: Kortit line: 145", "kID|kortin nimi|kpl|cmc\n1|Eka kortti|1|1\n2|Muut kortit|2|2", kortit.toString()); 
  } // Generated by ComTest END
}